//! Low-level enums and functions related to motor controllers.
#![allow(non_camel_case_types, non_upper_case_globals)]

use std::os::raw;

use super::ErrorCode;

transmute_from! {
    ControlFrame => ControlFrameEnhanced,
    StatusFrame => StatusFrameEnhanced,
}

#[doc(hidden)]
pub enum _Handle {}
/// A handle representing a motor controller.
pub type Handle = *mut _Handle;

/* automatically generated by rust-bindgen, ish */

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ControlFrame {
    Control_3_General = 0x040080,
    Control_4_Advanced = 0x0400C0,
    Control_6_MotProfAddTrajPoint = 0x040140,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ControlFrameEnhanced {
    Control_3_General = 0x040080,
    Control_4_Advanced = 0x0400C0,
    Control_5_FeedbackOutputOverride = 0x040100,
    Control_6_MotProfAddTrajPoint = 0x040140,
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum StatusFrameEnhanced {
    Status_1_General = 0x1400,
    Status_2_Feedback0 = 0x1440,
    Status_4_AinTempVbat = 0x14C0,
    Status_6_Misc = 0x1540,
    Status_7_CommStatus = 0x1580,
    Status_9_MotProfBuffer = 0x1600,
    Status_10_Targets = 0x1640,
    Status_12_Feedback1 = 0x16C0,
    Status_13_Base_PIDF0 = 0x1700,
    Status_14_Turn_PIDF1 = 0x1740,
    Status_15_FirmareApiStatus = 0x1780,
    Status_3_Quadrature = 0x1480,
    Status_8_PulseWidth = 0x15C0,
    Status_11_UartGadgeteer = 0x1680,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum StatusFrame {
    Status_1_General = 0x1400,
    Status_2_Feedback0 = 0x1440,
    Status_4_AinTempVbat = 0x14C0,
    Status_6_Misc = 0x1540,
    Status_7_CommStatus = 0x1580,
    Status_9_MotProfBuffer = 0x1600,
    Status_10_Targets = 0x1640,
    Status_12_Feedback1 = 0x16C0,
    Status_13_Base_PIDF0 = 0x1700,
    Status_14_Turn_PIDF1 = 0x1740,
    Status_15_FirmareApiStatus = 0x1780,
}

extern "C" {
    pub fn c_MotController_Create1(baseArbId: raw::c_int) -> Handle;

    pub fn c_MotController_GetDeviceNumber(
        handle: Handle,
        deviceNumber: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetDescription(
        handle: Handle,
        toFill: *mut raw::c_char,
        toFillByteSz: raw::c_int,
        numBytesFilled: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetDemand(
        handle: Handle,
        mode: raw::c_int,
        demand0: raw::c_int,
        demand1: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_Set_4(
        handle: Handle,
        mode: raw::c_int,
        demand0: f64,
        demand1: f64,
        demand1Type: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetNeutralMode(handle: Handle, neutralMode: raw::c_int);

    pub fn c_MotController_SetSensorPhase(handle: Handle, PhaseSensor: bool);

    pub fn c_MotController_SetInverted(handle: Handle, invert: bool);

    pub fn c_MotController_ConfigFactoryDefault(handle: Handle, timeoutMs: raw::c_int)
        -> ErrorCode;

    pub fn c_MotController_ConfigOpenLoopRamp(
        handle: Handle,
        secondsFromNeutralToFull: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigClosedLoopRamp(
        handle: Handle,
        secondsFromNeutralToFull: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigPeakOutputForward(
        handle: Handle,
        percentOut: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigPeakOutputReverse(
        handle: Handle,
        percentOut: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigNominalOutputForward(
        handle: Handle,
        percentOut: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigNominalOutputReverse(
        handle: Handle,
        percentOut: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigNeutralDeadband(
        handle: Handle,
        percentDeadband: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigVoltageCompSaturation(
        handle: Handle,
        voltage: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigVoltageMeasurementFilter(
        handle: Handle,
        filterWindowSamples: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_EnableVoltageCompensation(handle: Handle, enable: bool);

    pub fn c_MotController_GetBusVoltage(handle: Handle, voltage: *mut f64) -> ErrorCode;

    pub fn c_MotController_GetMotorOutputPercent(
        handle: Handle,
        percentOutput: *mut f64,
    ) -> ErrorCode;

    pub fn c_MotController_GetOutputCurrent(handle: Handle, current: *mut f64) -> ErrorCode;

    pub fn c_MotController_GetTemperature(handle: Handle, temperature: *mut f64) -> ErrorCode;

    pub fn c_MotController_ConfigSelectedFeedbackSensor(
        handle: Handle,
        feedbackDevice: raw::c_int,
        pidIdx: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigSelectedFeedbackCoefficient(
        handle: Handle,
        coefficient: f64,
        pidIdx: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigRemoteFeedbackFilter(
        handle: Handle,
        deviceID: raw::c_int,
        remoteSensorSource: raw::c_int,
        remoteOrdinal: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigSensorTerm(
        handle: Handle,
        sensorTerm: raw::c_int,
        feedbackDevice: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetSelectedSensorPosition(
        handle: Handle,
        param: *mut raw::c_int,
        pidIdx: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetSelectedSensorVelocity(
        handle: Handle,
        param: *mut raw::c_int,
        pidIdx: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetSelectedSensorPosition(
        handle: Handle,
        sensorPos: raw::c_int,
        pidIdx: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetControlFramePeriod(
        handle: Handle,
        frame: raw::c_int,
        periodMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetStatusFramePeriod(
        handle: Handle,
        frame: raw::c_int,
        periodMs: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetStatusFramePeriod(
        handle: Handle,
        frame: raw::c_int,
        periodMs: *mut raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigVelocityMeasurementPeriod(
        handle: Handle,
        period: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigVelocityMeasurementWindow(
        handle: Handle,
        windowSize: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigForwardLimitSwitchSource(
        handle: Handle,
        type_: raw::c_int,
        normalOpenOrClose: raw::c_int,
        deviceID: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigReverseLimitSwitchSource(
        handle: Handle,
        type_: raw::c_int,
        normalOpenOrClose: raw::c_int,
        deviceID: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_OverrideLimitSwitchesEnable(handle: Handle, enable: bool);

    pub fn c_MotController_ConfigForwardSoftLimitThreshold(
        handle: Handle,
        forwardSensorLimit: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigReverseSoftLimitThreshold(
        handle: Handle,
        reverseSensorLimit: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigForwardSoftLimitEnable(
        handle: Handle,
        enable: bool,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigReverseSoftLimitEnable(
        handle: Handle,
        enable: bool,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_OverrideSoftLimitsEnable(handle: Handle, enable: bool);

    pub fn c_MotController_Config_kP(
        handle: Handle,
        slotIdx: raw::c_int,
        value: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_Config_kI(
        handle: Handle,
        slotIdx: raw::c_int,
        value: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_Config_kD(
        handle: Handle,
        slotIdx: raw::c_int,
        value: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_Config_kF(
        handle: Handle,
        slotIdx: raw::c_int,
        value: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_Config_IntegralZone(
        handle: Handle,
        slotIdx: raw::c_int,
        izone: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigAllowableClosedloopError(
        handle: Handle,
        slotIdx: raw::c_int,
        allowableClosedLoopError: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigMaxIntegralAccumulator(
        handle: Handle,
        slotIdx: raw::c_int,
        iaccum: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigClosedLoopPeakOutput(
        handle: Handle,
        slotIdx: raw::c_int,
        percentOut: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigClosedLoopPeriod(
        handle: Handle,
        slotIdx: raw::c_int,
        loopTimeMs: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetIntegralAccumulator(
        handle: Handle,
        iaccum: f64,
        pidIdx: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetClosedLoopError(
        handle: Handle,
        closedLoopError: *mut raw::c_int,
        pidIdx: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetIntegralAccumulator(
        handle: Handle,
        iaccum: *mut f64,
        pidIdx: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetErrorDerivative(
        handle: Handle,
        derror: *mut f64,
        pidIdx: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SelectProfileSlot(
        handle: Handle,
        slotIdx: raw::c_int,
        pidIdx: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetActiveTrajectoryPosition(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetActiveTrajectoryVelocity(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetActiveTrajectoryHeading(handle: Handle, param: *mut f64)
        -> ErrorCode;

    pub fn c_MotController_GetActiveTrajectoryAll(
        handle: Handle,
        vel: *mut raw::c_int,
        pos: *mut raw::c_int,
        heading: *mut f64,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigMotionCruiseVelocity(
        handle: Handle,
        sensorUnitsPer100ms: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigMotionAcceleration(
        handle: Handle,
        sensorUnitsPer100msPerSec: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ClearMotionProfileTrajectories(handle: Handle) -> ErrorCode;

    pub fn c_MotController_GetMotionProfileTopLevelBufferCount(
        handle: Handle,
        value: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_PushMotionProfileTrajectory(
        handle: Handle,
        position: f64,
        velocity: f64,
        headingDeg: f64,
        profileSlotSelect: raw::c_int,
        isLastPoint: bool,
        zeroPos: bool,
    ) -> ErrorCode;

    pub fn c_MotController_PushMotionProfileTrajectory_2(
        handle: Handle,
        position: f64,
        velocity: f64,
        headingDeg: f64,
        profileSlotSelect0: raw::c_int,
        profileSlotSelect1: raw::c_int,
        isLastPoint: bool,
        zeroPos: bool,
        durationMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_IsMotionProfileTopLevelBufferFull(
        handle: Handle,
        value: *mut bool,
    ) -> ErrorCode;

    pub fn c_MotController_ProcessMotionProfileBuffer(handle: Handle) -> ErrorCode;

    pub fn c_MotController_GetMotionProfileStatus(
        handle: Handle,
        topBufferRem: *mut raw::c_int,
        topBufferCnt: *mut raw::c_int,
        btmBufferCnt: *mut raw::c_int,
        hasUnderrun: *mut bool,
        isUnderrun: *mut bool,
        activePointValid: *mut bool,
        isLast: *mut bool,
        profileSlotSelect: *mut raw::c_int,
        outputEnable: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetMotionProfileStatus_2(
        handle: Handle,
        topBufferRem: *mut raw::c_int,
        topBufferCnt: *mut raw::c_int,
        btmBufferCnt: *mut raw::c_int,
        hasUnderrun: *mut bool,
        isUnderrun: *mut bool,
        activePointValid: *mut bool,
        isLast: *mut bool,
        profileSlotSelect: *mut raw::c_int,
        outputEnable: *mut raw::c_int,
        timeDurMs: *mut raw::c_int,
        profileSlotSelect1: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ClearMotionProfileHasUnderrun(
        handle: Handle,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ChangeMotionControlFramePeriod(
        handle: Handle,
        periodMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigMotionProfileTrajectoryPeriod(
        handle: Handle,
        durationMs: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetLastError(handle: Handle) -> ErrorCode;

    pub fn c_MotController_GetFirmwareVersion(handle: Handle, arg1: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_HasResetOccurred(handle: Handle, arg1: *mut bool) -> ErrorCode;

    pub fn c_MotController_ConfigSetCustomParam(
        handle: Handle,
        newValue: raw::c_int,
        paramIndex: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigGetCustomParam(
        handle: Handle,
        readValue: *mut raw::c_int,
        paramIndex: raw::c_int,
        timoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigSetParameter(
        handle: Handle,
        param: raw::c_int,
        value: f64,
        subValue: raw::c_int,
        ordinal: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigGetParameter(
        handle: Handle,
        param: raw::c_int,
        value: *mut f64,
        ordinal: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigPeakCurrentLimit(
        handle: Handle,
        amps: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigPeakCurrentDuration(
        handle: Handle,
        milliseconds: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_ConfigContinuousCurrentLimit(
        handle: Handle,
        amps: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_EnableCurrentLimit(handle: Handle, enable: bool) -> ErrorCode;

    pub fn c_MotController_SetLastError(handle: Handle, error: raw::c_int) -> ErrorCode;

    pub fn c_MotController_GetAnalogIn(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_SetAnalogPosition(
        handle: Handle,
        newPosition: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetAnalogInRaw(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_GetAnalogInVel(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_GetQuadraturePosition(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetQuadraturePosition(
        handle: Handle,
        newPosition: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetQuadratureVelocity(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetPulseWidthPosition(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_SetPulseWidthPosition(
        handle: Handle,
        newPosition: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetPulseWidthVelocity(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetPulseWidthRiseToFallUs(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetPulseWidthRiseToRiseUs(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetPinStateQuadA(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_GetPinStateQuadB(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_GetPinStateQuadIdx(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_IsFwdLimitSwitchClosed(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_IsRevLimitSwitchClosed(
        handle: Handle,
        param: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetFaults(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_GetStickyFaults(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_MotController_ClearStickyFaults(handle: Handle, timeoutMs: raw::c_int) -> ErrorCode;

    pub fn c_MotController_SelectDemandType(handle: Handle, enable: bool) -> ErrorCode;

    pub fn c_MotController_SetMPEOutput(handle: Handle, MpeOutput: raw::c_int) -> ErrorCode;

    pub fn c_MotController_EnableHeadingHold(handle: Handle, enable: bool) -> ErrorCode;

    pub fn c_MotController_GetAnalogInAll(
        handle: Handle,
        withOv: *mut raw::c_int,
        raw: *mut raw::c_int,
        vel: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetQuadratureSensor(
        handle: Handle,
        pos: *mut raw::c_int,
        vel: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetPulseWidthAll(
        handle: Handle,
        pos: *mut raw::c_int,
        vel: *mut raw::c_int,
        riseToRiseUs: *mut raw::c_int,
        riseToFallUs: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetQuadPinStates(
        handle: Handle,
        quadA: *mut raw::c_int,
        quadB: *mut raw::c_int,
        quadIdx: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetLimitSwitchState(
        handle: Handle,
        isFwdClosed: *mut raw::c_int,
        isRevClosed: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_MotController_GetClosedLoopTarget(
        handle: Handle,
        value: *mut raw::c_int,
        pidIdx: raw::c_int,
    ) -> ErrorCode;
}
