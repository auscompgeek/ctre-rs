//! Motor controller enums defined in the Phoenix CCI headers.
#![allow(non_camel_case_types, non_upper_case_globals)]

use core::mem;

defaults! {
    DemandType => DemandType::Neutral,
    FollowerType => FollowerType::PercentOutput,

    FeedbackDevice => FeedbackDevice::QuadEncoder,
    /// Returns the default value of `RemoteSensor0`.
    ///
    /// NOTE: while the factory default value is 0, this value can't
    /// be set by the API. Thus, RemoteSensor0 is the default
    RemoteFeedbackDevice => RemoteFeedbackDevice::RemoteSensor0,

    LimitSwitchSource => LimitSwitchSource::FeedbackConnector,
    RemoteLimitSwitchSource => RemoteLimitSwitchSource::Deactivated,
    LimitSwitchNormal => LimitSwitchNormal::NormallyOpen,

    RemoteSensorSource => RemoteSensorSource::Off,
    VelocityMeasPeriod => VelocityMeasPeriod::Period_100Ms,
}

impl From<RemoteFeedbackDevice> for FeedbackDevice {
    #[inline]
    /// Cast a RemoteFeedbackDevice to the corresponding FeedbackDevice.
    fn from(v: RemoteFeedbackDevice) -> Self {
        unsafe { mem::transmute(v) }
    }
}

impl From<RemoteLimitSwitchSource> for LimitSwitchSource {
    #[inline]
    /// Cast a RemoteLimitSwitchSource to the corresponding LimitSwitchSource.
    fn from(v: RemoteLimitSwitchSource) -> Self {
        unsafe { mem::transmute(v) }
    }
}

impl LimitSwitchSource {
    /// Checks if a limit switch is a one of the remote values.
    pub fn is_remote(self) -> bool {
        match self {
            LimitSwitchSource::RemoteTalonSRX | LimitSwitchSource::RemoteCANifier => true,
            _ => false,
        }
    }
}

/* automatically generated by rust-bindgen, ish */

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ControlMode {
    PercentOutput = 0,
    Position = 1,
    Velocity = 2,
    Current = 3,
    Follower = 5,
    MotionProfile = 6,
    MotionMagic = 7,
    MotionProfileArc = 10,
    Disabled = 15,
}
#[repr(i32)]
/// How to interpret a demand value.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DemandType {
    /// Ignore the demand value and apply neutral/no-change.
    Neutral = 0,
    /**
     * When closed-looping, set the target of the aux PID loop to the demand value.
     *
     * When following, follow the processed output of the combined
     * primary/aux PID output.  The demand value is ignored.
     */
    AuxPID = 1,
    /// Simply add to the output
    ArbitraryFeedForward = 2,
}

impl FeedbackDevice {
    pub const CTRE_MagEncoder_Absolute: FeedbackDevice = FeedbackDevice::PulseWidthEncodedPosition;
    pub const CTRE_MagEncoder_Relative: FeedbackDevice = FeedbackDevice::QuadEncoder;
}
#[repr(i32)]
/// Motor controller with gadgeteer connector.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum FeedbackDevice {
    // NOTE: None removed as it doesn't exist in firmware
    QuadEncoder = 0,
    Analog = 2,
    Tachometer = 4,
    PulseWidthEncodedPosition = 8,
    SensorSum = 9,
    SensorDifference = 10,
    RemoteSensor0 = 11,
    RemoteSensor1 = 12,
    SoftwareEmulatedSensor = 15,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum RemoteFeedbackDevice {
    // NOTE: None removed as it doesn't exist in firmware
    SensorSum = 9,
    SensorDifference = 10,
    RemoteSensor0 = 11,
    RemoteSensor1 = 12,
    SoftwareEmulatedSensor = 15,
}

#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FollowerType {
    /// Standard follower mode.
    PercentOutput = 0,
    /// Follow the master device's auxiliary output 1.
    AuxOutput1 = 1,
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum LimitSwitchSource {
    FeedbackConnector = 0,
    RemoteTalonSRX = 1,
    RemoteCANifier = 2,
    Deactivated = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum RemoteLimitSwitchSource {
    RemoteTalonSRX = 1,
    RemoteCANifier = 2,
    Deactivated = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum LimitSwitchNormal {
    NormallyOpen = 0,
    NormallyClosed = 1,
    Disabled = 2,
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum NeutralMode {
    /// Use the NeutralMode that is set by the jumper wire on the CAN device
    EEPROMSetting = 0,
    /// Stop the motor's rotation by applying a force.
    Coast = 1,
    /// Stop the motor's rotation by applying a force.
    Brake = 2,
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "num", derive(FromPrimitive))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum RemoteSensorSource {
    Off = 0,
    TalonSRX_SelectedSensor = 1,
    Pigeon_Yaw = 2,
    Pigeon_Pitch = 3,
    Pigeon_Roll = 4,
    CANifier_Quadrature = 5,
    CANifier_PWMInput0 = 6,
    CANifier_PWMInput1 = 7,
    CANifier_PWMInput2 = 8,
    CANifier_PWMInput3 = 9,
    GadgeteerPigeon_Yaw = 10,
    GadgeteerPigeon_Pitch = 11,
    GadgeteerPigeon_Roll = 12,
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SensorTerm {
    Sum0 = 0,
    Sum1 = 1,
    Diff0 = 2,
    Diff1 = 3,
}

enum_number! {
    #[repr(i32)]
    #[cfg_attr(feature = "num", derive(FromPrimitive))]
    pub enum VelocityMeasPeriod {
        Period_1Ms = 1,
        Period_2Ms = 2,
        Period_5Ms = 5,
        Period_10Ms = 10,
        Period_20Ms = 20,
        Period_25Ms = 25,
        Period_50Ms = 50,
        Period_100Ms = 100,
    }
}
