/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct BasePIDSetConfiguration {
    pub selectedFeedbackCoefficient: f64,
}
#[test]
fn bindgen_test_layout_BasePIDSetConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<BasePIDSetConfiguration>(),
        8usize,
        concat!("Size of: ", stringify!(BasePIDSetConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<BasePIDSetConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(BasePIDSetConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BasePIDSetConfiguration>())).selectedFeedbackCoefficient
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BasePIDSetConfiguration),
            "::",
            stringify!(selectedFeedbackCoefficient)
        )
    );
}
#[repr(C)]
pub struct FilterConfiguration {
    pub remoteSensorDeviceID: ::std::os::raw::c_int,
    pub remoteSensorSource: RemoteSensorSource,
}
#[test]
fn bindgen_test_layout_FilterConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<FilterConfiguration>(),
        8usize,
        concat!("Size of: ", stringify!(FilterConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<FilterConfiguration>(),
        4usize,
        concat!("Alignment of ", stringify!(FilterConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FilterConfiguration>())).remoteSensorDeviceID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterConfiguration),
            "::",
            stringify!(remoteSensorDeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FilterConfiguration>())).remoteSensorSource as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterConfiguration),
            "::",
            stringify!(remoteSensorSource)
        )
    );
}
#[repr(C)]
pub struct SlotConfiguration {
    pub kP: f64,
    pub kI: f64,
    pub kD: f64,
    pub kF: f64,
    pub integralZone: ::std::os::raw::c_int,
    pub allowableClosedloopError: ::std::os::raw::c_int,
    pub maxIntegralAccumulator: f64,
    pub closedLoopPeakOutput: f64,
    pub closedLoopPeriod: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SlotConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<SlotConfiguration>(),
        64usize,
        concat!("Size of: ", stringify!(SlotConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<SlotConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(SlotConfiguration))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SlotConfiguration>())).kP as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(kP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SlotConfiguration>())).kI as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(kI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SlotConfiguration>())).kD as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(kD)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SlotConfiguration>())).kF as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(kF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SlotConfiguration>())).integralZone as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(integralZone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SlotConfiguration>())).allowableClosedloopError as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(allowableClosedloopError)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SlotConfiguration>())).maxIntegralAccumulator as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(maxIntegralAccumulator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SlotConfiguration>())).closedLoopPeakOutput as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(closedLoopPeakOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SlotConfiguration>())).closedLoopPeriod as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SlotConfiguration),
            "::",
            stringify!(closedLoopPeriod)
        )
    );
}
#[repr(C)]
pub struct BaseMotorControllerConfiguration {
    pub _base: CustomParamConfiguration,
    pub openloopRamp: f64,
    pub closedloopRamp: f64,
    pub peakOutputForward: f64,
    pub peakOutputReverse: f64,
    pub nominalOutputForward: f64,
    pub nominalOutputReverse: f64,
    pub neutralDeadband: f64,
    pub voltageCompSaturation: f64,
    pub voltageMeasurementFilter: ::std::os::raw::c_int,
    pub velocityMeasurementPeriod: VelocityMeasPeriod,
    pub velocityMeasurementWindow: ::std::os::raw::c_int,
    pub forwardLimitSwitchDeviceID: ::std::os::raw::c_int,
    pub reverseLimitSwitchDeviceID: ::std::os::raw::c_int,
    pub forwardLimitSwitchNormal: LimitSwitchNormal,
    pub reverseLimitSwitchNormal: LimitSwitchNormal,
    pub forwardSoftLimitThreshold: ::std::os::raw::c_int,
    pub reverseSoftLimitThreshold: ::std::os::raw::c_int,
    pub forwardSoftLimitEnable: bool,
    pub reverseSoftLimitEnable: bool,
    pub slot_0: SlotConfiguration,
    pub slot_1: SlotConfiguration,
    pub slot_2: SlotConfiguration,
    pub slot_3: SlotConfiguration,
    pub auxPIDPolarity: bool,
    pub filter_0: FilterConfiguration,
    pub filter_1: FilterConfiguration,
    pub motionCruiseVelocity: ::std::os::raw::c_int,
    pub motionAcceleration: ::std::os::raw::c_int,
    pub motionProfileTrajectoryPeriod: ::std::os::raw::c_int,
    pub feedbackNotContinuous: bool,
    pub remoteSensorClosedLoopDisableNeutralOnLOS: bool,
    pub clearPositionOnLimitF: bool,
    pub clearPositionOnLimitR: bool,
    pub clearPositionOnQuadIdx: bool,
    pub limitSwitchDisableNeutralOnLOS: bool,
    pub softLimitDisableNeutralOnLOS: bool,
    pub pulseWidthPeriod_EdgesPerRot: ::std::os::raw::c_int,
    pub pulseWidthPeriod_FilterWindowSz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BaseMotorControllerConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<BaseMotorControllerConfiguration>(),
        416usize,
        concat!("Size of: ", stringify!(BaseMotorControllerConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<BaseMotorControllerConfiguration>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BaseMotorControllerConfiguration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).openloopRamp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(openloopRamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).closedloopRamp as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(closedloopRamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).peakOutputForward
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(peakOutputForward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).peakOutputReverse
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(peakOutputReverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).nominalOutputForward
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(nominalOutputForward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).nominalOutputReverse
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(nominalOutputReverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).neutralDeadband as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(neutralDeadband)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).voltageCompSaturation
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(voltageCompSaturation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).voltageMeasurementFilter
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(voltageMeasurementFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).velocityMeasurementPeriod
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(velocityMeasurementPeriod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).velocityMeasurementWindow
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(velocityMeasurementWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).forwardLimitSwitchDeviceID
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(forwardLimitSwitchDeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).reverseLimitSwitchDeviceID
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(reverseLimitSwitchDeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).forwardLimitSwitchNormal
                as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(forwardLimitSwitchNormal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).reverseLimitSwitchNormal
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(reverseLimitSwitchNormal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).forwardSoftLimitThreshold
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(forwardSoftLimitThreshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).reverseSoftLimitThreshold
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(reverseSoftLimitThreshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).forwardSoftLimitEnable
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(forwardSoftLimitEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).reverseSoftLimitEnable
                as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(reverseSoftLimitEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).slot_0 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(slot_0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).slot_1 as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(slot_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).slot_2 as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(slot_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).slot_3 as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(slot_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).auxPIDPolarity as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(auxPIDPolarity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).filter_0 as *const _
                as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(filter_0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).filter_1 as *const _
                as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(filter_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).motionCruiseVelocity
                as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(motionCruiseVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).motionAcceleration
                as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(motionAcceleration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>()))
                .motionProfileTrajectoryPeriod as *const _ as usize
        },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(motionProfileTrajectoryPeriod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).feedbackNotContinuous
                as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(feedbackNotContinuous)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>()))
                .remoteSensorClosedLoopDisableNeutralOnLOS as *const _ as usize
        },
        401usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(remoteSensorClosedLoopDisableNeutralOnLOS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).clearPositionOnLimitF
                as *const _ as usize
        },
        402usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(clearPositionOnLimitF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).clearPositionOnLimitR
                as *const _ as usize
        },
        403usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(clearPositionOnLimitR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>())).clearPositionOnQuadIdx
                as *const _ as usize
        },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(clearPositionOnQuadIdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>()))
                .limitSwitchDisableNeutralOnLOS as *const _ as usize
        },
        405usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(limitSwitchDisableNeutralOnLOS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>()))
                .softLimitDisableNeutralOnLOS as *const _ as usize
        },
        406usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(softLimitDisableNeutralOnLOS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>()))
                .pulseWidthPeriod_EdgesPerRot as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(pulseWidthPeriod_EdgesPerRot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BaseMotorControllerConfiguration>()))
                .pulseWidthPeriod_FilterWindowSz as *const _ as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(BaseMotorControllerConfiguration),
            "::",
            stringify!(pulseWidthPeriod_FilterWindowSz)
        )
    );
}
/// CTRE Talon SRX Motor Configuration settings.
#[repr(C)]
pub struct TalonSRXPIDSetConfiguration {
    pub _base: BasePIDSetConfiguration,
    pub selectedFeedbackSensor: FeedbackDevice,
}
#[test]
fn bindgen_test_layout_TalonSRXPIDSetConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<TalonSRXPIDSetConfiguration>(),
        16usize,
        concat!("Size of: ", stringify!(TalonSRXPIDSetConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<TalonSRXPIDSetConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(TalonSRXPIDSetConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXPIDSetConfiguration>())).selectedFeedbackSensor
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXPIDSetConfiguration),
            "::",
            stringify!(selectedFeedbackSensor)
        )
    );
}
#[repr(C)]
pub struct TalonSRXConfiguration {
    pub _base: BaseMotorControllerConfiguration,
    pub primaryPID: TalonSRXPIDSetConfiguration,
    pub auxilaryPID: TalonSRXPIDSetConfiguration,
    pub forwardLimitSwitchSource: LimitSwitchSource,
    pub reverseLimitSwitchSource: LimitSwitchSource,
    pub sum_0: FeedbackDevice,
    pub sum_1: FeedbackDevice,
    pub diff_0: FeedbackDevice,
    pub diff_1: FeedbackDevice,
    pub peakCurrentLimit: ::std::os::raw::c_int,
    pub peakCurrentDuration: ::std::os::raw::c_int,
    pub continuousCurrentLimit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TalonSRXConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<TalonSRXConfiguration>(),
        488usize,
        concat!("Size of: ", stringify!(TalonSRXConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<TalonSRXConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(TalonSRXConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).primaryPID as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(primaryPID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).auxilaryPID as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(auxilaryPID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).forwardLimitSwitchSource as *const _
                as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(forwardLimitSwitchSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).reverseLimitSwitchSource as *const _
                as usize
        },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(reverseLimitSwitchSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TalonSRXConfiguration>())).sum_0 as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(sum_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TalonSRXConfiguration>())).sum_1 as *const _ as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(sum_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TalonSRXConfiguration>())).diff_0 as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(diff_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TalonSRXConfiguration>())).diff_1 as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(diff_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).peakCurrentLimit as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(peakCurrentLimit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).peakCurrentDuration as *const _
                as usize
        },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(peakCurrentDuration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TalonSRXConfiguration>())).continuousCurrentLimit as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(TalonSRXConfiguration),
            "::",
            stringify!(continuousCurrentLimit)
        )
    );
}
/// VEX Victor SPX Motor Configuration settings.
#[repr(C)]
pub struct VictorSPXPIDSetConfiguration {
    pub _base: BasePIDSetConfiguration,
    pub selectedFeedbackSensor: RemoteFeedbackDevice,
}
#[test]
fn bindgen_test_layout_VictorSPXPIDSetConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<VictorSPXPIDSetConfiguration>(),
        16usize,
        concat!("Size of: ", stringify!(VictorSPXPIDSetConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<VictorSPXPIDSetConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(VictorSPXPIDSetConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VictorSPXPIDSetConfiguration>())).selectedFeedbackSensor
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXPIDSetConfiguration),
            "::",
            stringify!(selectedFeedbackSensor)
        )
    );
}
#[repr(C)]
pub struct VictorSPXConfiguration {
    pub _base: BaseMotorControllerConfiguration,
    pub primaryPID: VictorSPXPIDSetConfiguration,
    pub auxilaryPID: VictorSPXPIDSetConfiguration,
    pub forwardLimitSwitchSource: RemoteLimitSwitchSource,
    pub reverseLimitSwitchSource: RemoteLimitSwitchSource,
    pub sum_0: RemoteFeedbackDevice,
    pub sum_1: RemoteFeedbackDevice,
    pub diff_0: RemoteFeedbackDevice,
    pub diff_1: RemoteFeedbackDevice,
}
#[test]
fn bindgen_test_layout_VictorSPXConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<VictorSPXConfiguration>(),
        472usize,
        concat!("Size of: ", stringify!(VictorSPXConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<VictorSPXConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(VictorSPXConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VictorSPXConfiguration>())).primaryPID as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(primaryPID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VictorSPXConfiguration>())).auxilaryPID as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(auxilaryPID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VictorSPXConfiguration>())).forwardLimitSwitchSource as *const _
                as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(forwardLimitSwitchSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VictorSPXConfiguration>())).reverseLimitSwitchSource as *const _
                as usize
        },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(reverseLimitSwitchSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VictorSPXConfiguration>())).sum_0 as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(sum_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VictorSPXConfiguration>())).sum_1 as *const _ as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(sum_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VictorSPXConfiguration>())).diff_0 as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(diff_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VictorSPXConfiguration>())).diff_1 as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(VictorSPXConfiguration),
            "::",
            stringify!(diff_1)
        )
    );
}
#[repr(C)]
pub struct CustomParamConfiguration {
    pub customParam_0: ::std::os::raw::c_int,
    pub customParam_1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CustomParamConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<CustomParamConfiguration>(),
        8usize,
        concat!("Size of: ", stringify!(CustomParamConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomParamConfiguration>(),
        4usize,
        concat!("Alignment of ", stringify!(CustomParamConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CustomParamConfiguration>())).customParam_0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomParamConfiguration),
            "::",
            stringify!(customParam_0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CustomParamConfiguration>())).customParam_1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomParamConfiguration),
            "::",
            stringify!(customParam_1)
        )
    );
}
