//! Enums and functions related to the Pigeon IMU.
#![allow(non_camel_case_types, non_upper_case_globals)]

use std::os::raw;

use super::ErrorCode;

#[doc(hidden)]
#[repr(C)]
pub struct Device {
    _private: [u8; 0],
}
/// A handle representing a Pigeon IMU.
pub type Handle = *mut Device;

/* automatically generated by rust-bindgen */

#[repr(i32)]
/// Enumerated type for status frame types.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PigeonIMU_ControlFrame {
    CondStatus_Control_1 = 272384,
}

impl PigeonIMU_StatusFrame {
    pub const BiasedStatus_4_Mag: PigeonIMU_StatusFrame = PigeonIMU_StatusFrame::RawStatus_4_Mag;
}
#[repr(i32)]
/// Enumerated type for status frame types.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PigeonIMU_StatusFrame {
    CondStatus_1_General = 270336,
    CondStatus_9_SixDeg_YPR = 270848,
    CondStatus_6_SensorFusion = 270656,
    CondStatus_11_GyroAccum = 270976,
    CondStatus_2_GeneralCompass = 270400,
    CondStatus_3_GeneralAccel = 270464,
    CondStatus_10_SixDeg_Quat = 270912,
    RawStatus_4_Mag = 269504,
    BiasedStatus_2_Gyro = 269376,
    BiasedStatus_6_Accel = 269632,
}

extern "C" {
    pub fn c_PigeonIMU_Create2(talonDeviceID: raw::c_int) -> Handle;

    pub fn c_PigeonIMU_Create1(deviceNumber: raw::c_int) -> Handle;

    pub fn c_PigeonIMU_DestroyAll();

    pub fn c_PigeonIMU_Destroy(handle: Handle) -> ErrorCode;

    pub fn c_PigeonIMU_GetDescription(
        handle: Handle,
        toFill: *mut raw::c_char,
        toFillByteSz: raw::c_int,
        numBytesFilled: *mut usize,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigSetParameter(
        handle: Handle,
        param: raw::c_int,
        value: f64,
        subValue: u8,
        ordinal: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigGetParameter(
        handle: Handle,
        param: raw::c_int,
        value: *mut f64,
        ordinal: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigGetParameter_6(
        handle: Handle,
        param: i32,
        valueToSend: i32,
        valueRecieved: *mut i32,
        subValue: *mut u8,
        ordinal: i32,
        timeoutMs: i32,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigSetCustomParam(
        handle: Handle,
        newValue: raw::c_int,
        paramIndex: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigGetCustomParam(
        handle: Handle,
        readValue: *mut raw::c_int,
        paramIndex: raw::c_int,
        timoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigFactoryDefault(handle: Handle, timeoutMs: raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_SetYaw(handle: Handle, angleDeg: f64, timeoutMs: raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_AddYaw(handle: Handle, angleDeg: f64, timeoutMs: raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_SetYawToCompass(handle: Handle, timeoutMs: raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_SetFusedHeading(
        handle: Handle,
        angleDeg: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_AddFusedHeading(
        handle: Handle,
        angleDeg: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_SetFusedHeadingToCompass(handle: Handle, timeoutMs: raw::c_int)
        -> ErrorCode;

    pub fn c_PigeonIMU_SetAccumZAngle(
        handle: Handle,
        angleDeg: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_ConfigTemperatureCompensationEnable(
        handle: Handle,
        bTempCompEnable: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_SetTemperatureCompensationDisable(
        handle: Handle,
        bTempCompDisable: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_SetCompassDeclination(
        handle: Handle,
        angleDegOffset: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_SetCompassAngle(
        handle: Handle,
        angleDeg: f64,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_EnterCalibrationMode(
        handle: Handle,
        calMode: raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetGeneralStatus(
        handle: Handle,
        state: *mut raw::c_int,
        currentMode: *mut raw::c_int,
        calibrationError: *mut raw::c_int,
        bCalIsBooting: *mut raw::c_int,
        tempC: *mut f64,
        upTimeSec: *mut raw::c_int,
        noMotionBiasCount: *mut raw::c_int,
        tempCompensationCount: *mut raw::c_int,
        lastError: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetLastError(handle: Handle) -> ErrorCode;

    pub fn c_PigeonIMU_Get6dQuaternion(handle: Handle, wxyz: *mut [f64; 4]) -> ErrorCode;

    pub fn c_PigeonIMU_GetYawPitchRoll(handle: Handle, ypr: *mut [f64; 3]) -> ErrorCode;

    pub fn c_PigeonIMU_GetAccumGyro(handle: Handle, xyz_deg: *mut [f64; 3]) -> ErrorCode;

    pub fn c_PigeonIMU_GetAbsoluteCompassHeading(handle: Handle, value: *mut f64) -> ErrorCode;

    pub fn c_PigeonIMU_GetCompassHeading(handle: Handle, value: *mut f64) -> ErrorCode;

    pub fn c_PigeonIMU_GetCompassFieldStrength(handle: Handle, value: *mut f64) -> ErrorCode;

    pub fn c_PigeonIMU_GetTemp(handle: Handle, value: *mut f64) -> ErrorCode;

    pub fn c_PigeonIMU_GetState(handle: Handle, state: *mut raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_GetUpTime(handle: Handle, value: *mut raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_GetRawMagnetometer(
        handle: Handle,
        rm_xyz: *mut [raw::c_short; 3],
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetBiasedMagnetometer(
        handle: Handle,
        bm_xyz: *mut [raw::c_short; 3],
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetBiasedAccelerometer(
        handle: Handle,
        ba_xyz: *mut [raw::c_short; 3],
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetRawGyro(handle: Handle, xyz_dps: *mut [f64; 3]) -> ErrorCode;

    pub fn c_PigeonIMU_GetAccelerometerAngles(
        handle: Handle,
        tiltAngles: *mut [f64; 3],
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetFusedHeading2(
        handle: Handle,
        bIsFusing: *mut raw::c_int,
        bIsValid: *mut raw::c_int,
        value: *mut f64,
        lastError: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetFusedHeading1(handle: Handle, value: *mut f64) -> ErrorCode;

    pub fn c_PigeonIMU_GetResetCount(handle: Handle, value: *mut raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_GetResetFlags(handle: Handle, value: *mut raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_GetFirmwareVersion(
        handle: Handle,
        firmwareVers: *mut raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_HasResetOccurred(handle: Handle, hasReset: *mut bool) -> ErrorCode;

    pub fn c_PigeonIMU_SetLastError(handle: Handle, value: raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_GetFaults(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_GetStickyFaults(handle: Handle, param: *mut raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_ClearStickyFaults(handle: Handle, timeoutMs: raw::c_int) -> ErrorCode;

    pub fn c_PigeonIMU_SetStatusFramePeriod(
        handle: Handle,
        frame: raw::c_int,
        periodMs: u8,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_GetStatusFramePeriod(
        handle: Handle,
        frame: raw::c_int,
        periodMs: *mut raw::c_int,
        timeoutMs: raw::c_int,
    ) -> ErrorCode;

    pub fn c_PigeonIMU_SetControlFramePeriod(
        handle: Handle,
        frame: raw::c_int,
        periodMs: raw::c_int,
    ) -> ErrorCode;
}
